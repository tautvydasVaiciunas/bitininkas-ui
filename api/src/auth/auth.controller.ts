import { Body, Controller, Get, NotFoundException, Post, Request } from '@nestjs/common';import { AuthService } from './auth.service';import { RegisterDto } from './dto/register.dto';import { LoginDto } from './dto/login.dto';import { RefreshDto } from './dto/refresh.dto';import { Public } from '../common/decorators/public.decorator';import { UsersService } from '../users/users.service';@Controller('auth')export class AuthController {  constructor(    private readonly authService: AuthService,    private readonly usersService: UsersService,  ) {}  @Public()  @Post('register')  register(@Body() registerDto: RegisterDto) {    return this.authService.register(registerDto);  }  @Public()  @Post('login')  login(@Body() loginDto: LoginDto) {    return this.authService.login(loginDto);  }  @Public()  @Post('refresh')  refresh(@Body() refreshDto: RefreshDto) {    return this.authService.refresh(refreshDto.refreshToken);  }  @Public()  @Post('request-reset')  requestReset() {    return { message: 'Password reset stub' };  }  @Get('me')  async me(@Request() req) {    const user = await this.usersService.findById(req.user.id);    if (!user) {      throw new NotFoundException('User not found');    }    return {      id: user.id,      email: user.email,      role: user.role,      name: user.name,    };  }}